import axios from 'axios';
import * as cheerio from 'cheerio';
import fs from 'fs';
import path from 'path';

function random(min: number, max: number) {
    return Math.floor(min + Math.random() * (max - min + 1));
}

function sleep(ms: number): Promise<void> {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}

async function getAnimeList() {
    const url = 'https://www3.animeflv.net/browse';
    const { data }: { data: string } = await axios.get(url);
    const $ = cheerio.load(data);
    const pages = parseInt($('ul.pagination > li').eq(-2).text());
    if (!pages) {
        console.error('failed to fetch page amount');
        return;
    }

    const animeTitles: AnimeTitle[] = [];

    const fetch = async (i: number, pages: number) => {
        let tries = 0;
        while (true) {
            try {
                console.info('fetching page ' + i + '/' + pages);
                animeTitles.push(...(await grabTitlesFromPage(url + "?page=" + i)));
                const ms = random(500, 1000);
                console.info('sleeping ' + ms + ' ms');
                await sleep(ms);
                return;
            } catch {
                if (++tries == 5) {
                    return;
                }
            }
        }
    }

    for (let i = 0; i < pages; ++i) {
        await fetch(i, pages);
    }

    const stream = fs.createWriteStream(path.resolve(__dirname, '..', 'src', 'anime-router.ts'),);
    stream.write('// this file is autogenerated by scripts/generate-routes.ts');
    stream.write('\n\n\n');
    stream.write("import { Router } from 'express';");
    stream.write('\n');
    stream.write("import AnimeController from './anime-controller'");
    stream.write('\n');
    stream.write('const router = Router();');
    stream.write('\n\n');
    for (const title of animeTitles) {
        if (!title.href) {
            continue;
        }
        stream.write(
            `router.get('/${title.href.replace('/anime/', '')}', AnimeController.handle);`,
        );
        stream.write('\n');
    }
    stream.write('\n\nexport default router;\n');
    stream.close();
}

type AnimeTitle = {
    href?: string;
    title: string;
};

async function grabTitlesFromPage(url: string): Promise<AnimeTitle[]> {
    const { data }: { data: string } = await axios.get(url);
    const $ = cheerio.load(data);
    const elements = $('ul.ListAnimes > li')
        .map((i, el) => {
            return {
                href: $(el).find('article > a').attr('href'),
                title: $(el).find('article > a > h3.Title').text(),
            };
        })
        .get();

    return elements;
}

async function main() {
    await getAnimeList();
}

main();
